<!DOCTYPE html>
<html>

<head>
    <title>PokeClicker Underground Tool</title>
    <style>
        * {
            margin: 0;
            padding: 0;
        }

        .responsive-form {
            width: 100%;
            display: flex;
        }

        .form-group {
            display: flex;
            width: 100%;
            align-items: stretch;
        }

        .text-area {
            width: 90%;
            resize: none;
            padding-left: 10px;
            padding-right: 10px;
            border: 1px solid #ccc;
            border-radius: 4px 0 0 4px;
            outline: none;
        }

        .submit-button {
            width: 5%;
            border: 1px solid #ccc;
            border-left: none;
            border-radius: 0 4px 4px 0;
            background-color: #007bff;
            color: white;
            cursor: pointer;
            padding: 1px;
            box-sizing: border-box;
        }

        .clear-button {
            width: 5%;
            border: 1px solid #ccc;
            border-left: none;
            border-radius: 0 4px 4px 0;
            background-color: #ec4e4e;
            color: white;
            cursor: pointer;
            padding: 1px;
            box-sizing: border-box;
        }

        .submit-button:hover {
            background-color: #0056b3;
        }

        .grid-container {
            display: grid;
            grid-template-columns: repeat(25, 1fr);
            grid-template-rows: repeat(12, 1fr);
            gap: 0;
            margin: 0;
            padding: 0;
        }

        .grid-container img {
            width: 100%;
            display: block;
        }
    </style>
</head>

<body>
    <form class="responsive-form" id="base64Form" autocomplete="off">
        <div class="form-group">
            <textarea class="text-area" id="base64Input" rows="1" placeholder="Paste Save Here" required></textarea>
            <button type="submit" class="submit-button">Submit</button>
            <button type="reset" class="clear-button">Clear</button>
        </div>
    </form>

    <div class="grid-container">
        <% for (let y=0; y < 12; y++) { %>
            <% for (let x=0; x < 25; x++) { %>
                <img id=<%=' x' + x + 'y' + y %> src=<%= 'assets/' + 0 + '.png' %>>
                    <% } %>
                        <% } %>
    </div>
</body>

<script>

    document.getElementById('base64Form').addEventListener('submit', e => {
        event.preventDefault();

        //reset the grid-container
        for (let x = 0; x < 25; x++) {
            for (let y = 0; y < 12; y++) {
                document.getElementById('x' + x + 'y' + y).src = 'assets/' + 0 + '.png';
            }
        }

        const base64String = document.getElementById('base64Input').value;

        try {
            const mineData = JSON.parse(atob(base64String)).save.underground.mine;
            console.log('Decoded String:', mineData);

            manipulateGrid(mineData);

        } catch (error) {
            console.error('Error determining mine data:', error);
        }
    });

    document.getElementById('base64Form').addEventListener('reset', e => {
        event.preventDefault();

        document.getElementById('base64Input').value = '';

        document.querySelector('.submit-button').click();
    });

    function manipulateGrid(mineData) {
        const numItems = mineData.itemsBuried + mineData.itemsFound;
        const colorArray = generateColors(numItems);

        const colorDictionary = {};
        let colIndex = 0;

        for (let x = 0; x < 25; x++) {
            for (let y = 0; y < 12; y++) {
                document.getElementById('x' + x + 'y' + y).src = 'assets/' + mineData.grid[y][x] + '.png';

                if (mineData.rewardGrid[y][x] !== 0) {
                    const reward = mineData.rewardGrid[y][x].value;
                    if (colorDictionary[reward] === undefined) {
                        colorDictionary[reward] = colorArray[colIndex];
                        colIndex++;
                    }

                    replaceImageSrcWithColor(document.getElementById('x' + x + 'y' + y), colorDictionary[reward]);
                }
            }
        }

        console.log(colorDictionary);
    }

    function generateColors(numItems) {
        const colors = [];
        const baseValue = 0.7;
        const valueVariance = 0.2;

        offset = Math.random() * 10 - 5;

        for (let i = 0; i < numItems; i++) {
            const hue = (i / numItems) * 360 + offset;

            const value = baseValue + (Math.random() * valueVariance - valueVariance / 2);

            const color = hsvToRgb(hue, 0.8, value);

            colors.push(color);
        }

        return colors;
    }

    function hsvToRgb(h, s, v) {
        let r, g, b;

        const i = Math.floor(h / 60);
        const f = h / 60 - i;
        const p = v * (1 - s);
        const q = v * (1 - f * s);
        const t = v * (1 - (1 - f) * s);

        switch (i % 6) {
            case 0:
                r = v, g = t, b = p;
                break;
            case 1:
                r = q, g = v, b = p;
                break;
            case 2:
                r = p, g = v, b = t;
                break;
            case 3:
                r = p, g = q, b = v;
                break;
            case 4:
                r = t, g = p, b = v;
                break;
            case 5:
                r = v, g = p, b = q;
                break;
        }

        return `rgb(${Math.round(r * 255)}, ${Math.round(g * 255)}, ${Math.round(b * 255)})`;
    }

    function replaceImageSrcWithColor(imgElement, hexColor) {
        const canvas = document.createElement('canvas');

        canvas.width = imgElement.width;
        canvas.height = imgElement.height;

        const ctx = canvas.getContext('2d');

        ctx.fillStyle = hexColor;
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        ctx.strokeStyle = 'gray';
        ctx.lineWidth = 2;
        ctx.strokeRect(0, 0, canvas.width, canvas.height);

        const dataURL = canvas.toDataURL();

        imgElement.src = dataURL;
    }
</script>

</html>